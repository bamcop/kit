// this file was automatically generated, DO NOT EDIT
// structs
// struct2ts:github.com/bamcop/kit/tool/cmd/gin_genc/example/srv/skia_gen.BarRequest
interface BarRequest {
	id: number;
}

// struct2ts:github.com/bamcop/kit/tool/cmd/gin_genc/example/srv/skia_gen.BarResponse
interface BarResponse {
	path: string;
}

// struct2ts:github.com/bamcop/kit/tool/cmd/gin_genc/example/srv/skia_gen.FooRequest
interface FooRequest {
	id: number;
}

// struct2ts:github.com/bamcop/kit/tool/cmd/gin_genc/example/srv/skia_gen.FooResponse
interface FooResponse {
	path: string;
}

// struct2ts:github.com/bamcop/kit/tool/cmd/gin_genc/example/srv/skia_gen.HelloRequest
interface HelloRequest {
	id: number;
}

// struct2ts:github.com/bamcop/kit/tool/cmd/gin_genc/example/srv/skia_gen.HelloResponse
interface HelloResponse {
	now: Time;
}


// Code generated by doc3. DO NOT EDIT.
// Utils: https://stackoverflow.com/a/69288824
type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
  ? { [K in keyof O]: O[K] }
  : never;

type ExpandRecursively<T> = T extends (...args: infer A) => infer R
  ? (...args: ExpandRecursively<A>) => ExpandRecursively<R>
  : T extends object
  ? T extends infer O
    ? { [K in keyof O]: ExpandRecursively<O[K]> }
    : never
  : T;
// Utils: end

declare namespace remote {
	function foo(params: ExpandRecursively<FooRequest>): Promise<ExpandRecursively<FooResponse>>;
	function hello(params: ExpandRecursively<HelloRequest>): Promise<ExpandRecursively<HelloResponse>>;
	declare namespace global {
		function bar(params: ExpandRecursively<BarRequest>): Promise<ExpandRecursively<BarResponse>>;
	}
}
